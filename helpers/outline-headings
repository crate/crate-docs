#!/usr/bin/python3

# Licensed to Crate.io GmbH ("Crate") under one or more contributor
# license agreements.  See the NOTICE file distributed with this work for
# additional information regarding copyright ownership.  Crate licenses
# this file to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.  You may
# obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
# However, if you have executed another commercial license agreement
# with Crate these terms will supersede the license and you may use the
# software solely pursuant to the terms of the relevant commercial agreement.


r"""
Outline a document's heading structure.

Synopsis:

    $ ./outline-headings FILENAME [ ROOT_HEADING ] [ LEFT_STRIP ]

Scan a file (`FILENAME`) for headings marked up using the heading structure
markup documented in the Crate.io RST style guide. For RST style guide details,
see <https://github.com/crate/crate-docs/blob/main/style/rst.rst>.

NOTE: The RST markup style is sometimes used in non-RST files (e.g.,
`crate.yml`). This script can be used on those files too.

This program discards the root heading (i.e., document title) and outlines
the remaining headings structure (printed to STDOUT) with heading levels
indicated by horizontal indentation.

If you specify a value for `ROOT_HEADING`, the first subheading that matches
that value will be taken as the root heading and the program will only
outline the direct descendants of that subheading.

If you specify a value for `LEFT_STRIP`, the program will strip that value from
the left-hand side of every line. You can use this argument to process headings
that are commented out (e.g., set `LEFT_STRIP` to `#`).

Example uses:

- An autogenerated RST table of contents will show you the semantic outline of
  a document. However, it will not tell you anything about the syntax used to
  mark up those headings.

  If you are modifying an existing document, it can be hard to keep track of
  which headings are supposed to be at what level.

  You can use this tool to compare the original semantic outline to the
  syntactic outline (according to the style guide) as you attempt to make
  changes.

- If two different files contain a heading structure that needs to be kept in
  sync (e.g., config files that correspond one-to-one with sections in the
  documentation), you can use this tool to help you with that.

  First, generate an outline of both files:

      $ ./outline-headings path/to/crate/docs/config/node.rst \
            > outline-rst.txt

      $ ./outline-headings path/to/crate/app/src/main/dist/config/crate.yml \
            'Node-specific settings' '#' \
            > outline-yml.txt

  Then, compare the differences:

      $ diff node-settings-rst.txt node-settings-yml.txt
"""

import re
import sys


# Heading underscores with corresponding heading level
# Cf. <https://github.com/crate/crate-docs/blob/main/style/rst.rst>
HEADING_LEVELS = {
    "=": 1,
    "-": 2,
    "'": 3,
    ".": 4,
    "`": 5,
}

INDENT_PER_LEVEL = "  "


def exit_help():
    """Print help message and exit."""
    print(__doc__.strip())
    sys.exit(0)


def compile_levels(heading_levels):
    """Compile heading level underline symbols into regular expressions.

    Spaces are ignored on both sides of the underline . We could be strict with
    spaces when constructing regular expressions, but they can be useful for
    debugging purposes (allowing you to indent headings for better visual
    distinction, and so on).
    """
    heading_levels_re = {}
    for symbol, level in HEADING_LEVELS.items():
        symbol_re = re.compile("^ *({}+) *$".format(re.escape(symbol)))
        heading_levels_re[symbol_re] = heading_levels[symbol]
    return heading_levels_re


def process_file(target_filename, left_strip):
    """Read file and return left stripped source lines."""
    # Read lines and handle `STRIP` functionality
    source_lines = []
    with open(target_filename, "r") as target_file:
        for line_str in target_file.readlines():
            if left_strip is not None:
                try:
                    line_str = left_strip_re.split(line_str)[1]
                except IndexError:
                    continue
            source_lines.append(line_str.strip())
    return source_lines


def get_headings(source_lines, heading_levels_re):
    """Return a list of headings along with the heading level."""
    heading_re = re.compile("[a-zA-Z0-9]+")
    headings = []
    for i, current_line in enumerate(source_lines):
        if not heading_re.match(current_line):
            continue
        try:
            next_line = source_lines[i + 1]
        except IndexError:
            continue
        # Try to match next line against heading level patterns
        for symbol_re, level in heading_levels_re.items():
            re_match = symbol_re.fullmatch(next_line)
            if re_match:
                headings.append([level, current_line.strip()])
                continue
    # Always discard the true root heading (i.e., document title)
    headings = headings[1:]
    return headings


def select_heading(headings, root_heading):
    """Select a specific heading and all subheadings."""
    # Handle `ROOT` functionality (allow empty values to turn off this
    # functionality as we don't have proper argument parsing implemented yet)
    root_level = 0
    if root_heading:
        i_first = None
        i_last = None
        # Scan the list of headings for the heading we will consider the new
        # root of the heading tree
        for i, item in enumerate(headings):
            level, heading_text = item
            i_last = i + 1
            if level <= root_level:
                break
            if root_re.match(heading_text):
                i_first = i + 1
                root_level = level
        if root_level == 0:
            print("ERROR: No subheading matching root value")
            sys.exit(1)
        headings = headings[i_first : i_last - 1]
    return headings, root_level


def print_headings(headings, root_level):
    """Print a list of headings with indents according to heading level."""
    for level, heading_text in headings:
        # Adjust level to root heading baseline
        level = level - root_level
        # Indent headings for every level below the first level
        indent = INDENT_PER_LEVEL * (level - 1)
        print("{}{}".format(indent, heading_text))


def main(target_filename, root_heading, left_strip):
    """Print a list of headings according to main script arguments."""
    levels_re = compile_levels(HEADING_LEVELS)
    source_lines = process_file(target_filename, left_strip)
    headings = get_headings(source_lines, levels_re)
    headings, root_level = select_heading(headings, root_heading)
    print_headings(headings, root_level)


if __name__ == "__main__":
    try:
        target_filename = sys.argv[1]
    except IndexError:
        exit_help()
    try:
        root_heading = sys.argv[2]
        root_re = re.compile("^ *{} *$".format(re.escape(root_heading)))
    except IndexError:
        root_heading = None
    try:
        left_strip = sys.argv[3]
        left_strip_re = re.compile("^ *{} *".format(re.escape(left_strip)))
    except IndexError:
        left_strip = None
    main(target_filename, root_heading, left_strip)
